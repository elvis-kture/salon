<?php

define('RED_STATUS_TID', 25);
define('DAY_IN_SECONDS', 3600*24);
define('BILL_NODE_TYPE', 'event_calendar');
define('BALANCE_NODE_TYPE', 'balance_check');
define('CLOSE_DAY_NODE_TYPE', 'close_day');
define('GREEN_STATUS_EVENT_TID', 11);
define('NORMAL_STATUS_EVENT_TID', 12);
define('PAY_FORMAT_WITHOUT_CASH_TID', 30);
define('PAY_TYPE_CREDIT_TID', 32);
define('PAY_TYPE_DEBIT_TID', 31);
define('PAY_FORMAT_KASSA_TID', 33);
define('ON_APPROVE_STATUS_EVENT_TID', 35);
define('PAY_TYPE_PEREKIDKA_TID_LOCAL', 85);
define('PAY_TYPE_PEREKIDKA_TID_MASTER', 112);

function salon_init(){
	global $user;
	if (drupal_is_front_page()) {
		if (!drupal_is_cli()) {
			drupal_goto('masters/today/billing');
		}
	}

	drupal_add_css(drupal_get_path('module', 'salon') .'/salon.css');
	drupal_add_js(drupal_get_path('module', 'salon') .'/salon.js');

	if ($user->uid != 1) {
		drupal_add_css(drupal_get_path('module', 'salon') .'/admin_hide.css');
	}

}

/**
 * AJAX callback for loading node list
 */
function form_ajax_form_load_nodes($form, $form_state) {
	// Возвращаем элемент формы, который должен быть перезагружен.
	// В данном случае надо перезагрузить выпадающий список с материалами.
	return $form['node'];
}


//function metabetting_main_update_signup_link_callback(&$form, $form_state) {
//	if ($form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] == 85) {
//		$form['list'] = array(
//			'#title' => t('Crust Size'),
//			'#type' => 'select',
//			'#description' => 'Select the desired pizza crust size.',
//			'#options' => array(t('--- SELECT ---'), t('10"'), t('12"'), t('16"')),
//		);
//	}
//	return array(
//		'#type' => 'ajax',
//		'#commands' => array(
//			ajax_command_replace("#field_pay_type_list_wrapper", render($form['list'])),
//		)
//	);
//}

/**
 * Implements hook_form_alter().
 */
function salon_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'event_calendar_node_form') {

		drupal_add_js(drupal_get_path('module', 'salon') .'/states.js');

		$form['#validate'][] = 'check_form_validate';

		$form['#attributes']['autocomplete'] = 'off';

//		$form['field_pay_type']['und']['#ajax'] = array(
//			'callback' => 'metabetting_main_update_signup_link_callback',
//			'wrapper' => array('field_pay_type_wrapper'),
//			'event' => 'change',
//			'method' => 'replace',
//		);
//
//		$form['markup'] = array(
//			'#prefix' => '<div id = "field_pay_type_list_wrapper">',
//			'#suffix' => '</div>',
//			'#markup' => '',
//		);

		if ($form['field_perekidka_balance'] && arg(2) == 'edit' ) {
			$term_name = explode(' ', $form['#node']->body[LANGUAGE_NONE][0]['value'])[2];
			$salon = taxonomy_get_term_by_name($term_name);
			$form['field_perekidka_balance'][LANGUAGE_NONE]['#default_value'] = key($salon);

//			$form['body'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
			$form['field_perekidka_balance'][LANGUAGE_NONE]['#attributes']['disabled'] = TRUE;
		} else {
            foreach ($form['field_perekidka_balance'][LANGUAGE_NONE]['#options'] as $option_tid_salon => $name) {

                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'balance_check')
                    ->fieldCondition('field_salon', 'tid', $option_tid_salon);

                $result = $query->execute();
                if (!$result) {
                    unset($form['field_perekidka_balance'][LANGUAGE_NONE]['#options'][$option_tid_salon]);
                }

            }
        }


		if (!$form['title']['#default_value']) {
			$form['title']['#default_value'] = t('Чек');
		}
		if ($form['#node']->field_date[LANGUAGE_NONE][0]['value']) {
			$form['title']['#default_value'] = ' ' . t('за !date', array('!date' => $form['#node']->field_date[LANGUAGE_NONE][0]['value']));
		}
		$form['title']['#type'] = 'hidden';

		if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'event-calendar') {
			$form['event_calendar_status']['#access'] = FALSE;
		}
		$form['field_salon'][LANGUAGE_NONE]['#options']['_none'] = ' - ' . t('Выбрать адрес') . ' - ';
		if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
			if (!user_access('administer site configuration')) {
				$datetime_array = explode(' ', $form['#node']->field_date[LANGUAGE_NONE][0]['value']);
				$salon_tid = $form['#node']->field_salon[LANGUAGE_NONE][0]['tid'];
				$closed_days = views_get_view_result('all_closed_days', 'block_3', $salon_tid, $datetime_array[0]);
				if ($closed_days) {
					$form['event_calendar_status']['#access'] = FALSE;
				}
				else {
					unset($form['event_calendar_status'][LANGUAGE_NONE]['#options'][GREEN_STATUS_EVENT_TID]);
					unset($form['event_calendar_status'][LANGUAGE_NONE]['#options'][RED_STATUS_TID]);
				}
			}
		}

	}

	if ($form_id == 'close_day_node_form') {

		$form['#attributes']['autocomplete'] = 'off';

		if (!$form['title']['#default_value']) {
			$form['title']['#default_value'] = t('Закрытый день - ' . $_GET['date'] . ' ' . time());
		}

		$form['title']['#type'] = 'hidden';
		if ($_GET['date']) {
			$form['field_date'][LANGUAGE_NONE][0]['#default_value']['value'] = $_GET['date'] . ' 00:00:00';
			$form['field_date'][LANGUAGE_NONE][0]['#default_value']['value2'] = $_GET['date'] . ' 00:00:00';
			$form['field_date'][LANGUAGE_NONE][0]['#date_items']['value'] = $_GET['date'] . ' 00:00:00';
			$form['field_date'][LANGUAGE_NONE][0]['#date_items']['value2'] = $_GET['date'] . ' 00:00:00';
		}

		if ($form['field_date'][LANGUAGE_NONE][0]['#default_value']['value']) {
		}

		$form['field_date']['#access'] = FALSE;
		$form['body']['#type'] = 'hidden';

		if ((int)$_GET['salon']) {
			$form['field_salon'][LANGUAGE_NONE]['#default_value'] = $_GET['salon'];
			$form['field_salon']['#access'] = FALSE;
		}

		$form['actions']['submit']['#value'] = '<span class="icon glyphicon glyphicon-ok" aria-hidden="true"></span>' . t('Закрыть день');
		$form['actions']['submit']['#attributes'] = array('class' => array('btn btn-success form-submit'));
		$form['actions']['contact_information'] = array(
			'#weight' => 11,
			'#attributes' => array('class' => array('btn btn-danger form-submit')),
			'#markup' => '<button id="cancel-popup" type="button" value="Отмена" class="btn btn-danger form-submit"><span class="icon glyphicon" aria-hidden="true"></span>' . t('Отмена') . '</button>',
		);
		$form['actions']['submit']['#submit'][] = '_salon_close_day_node_form_submit';
	}

	if ($form_id == 'balance_check_node_form') {
        drupal_set_message(t('<strong style="text-align: center">Заполняйте внимательно все поля формы, потому что изменить/удалить значения будет невозможно!</strong>'), 'warning');
		if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'balance-check') {
			$form['#validate'][] = 'balance_check_form_validate';
		}
		if (arg(0) == 'node' && arg(2) == 'edit') {
            $form['field_salon'][LANGUAGE_NONE]['#attributes']['disabled'] = TRUE;
            $form['field_costs'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
        }
	}
}

function balance_check_form_validate($form, &$form_state){
	$salon_tid = $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'];
	$node_balance_nid = get_node_by_field('balance_check', $salon_tid);
	if ($node_balance_nid) {
		form_set_error('field_salon', t('Баланс для этого адреса уже существует.'));
	}
}

//function check_form_validate($form, &$form_state){
//
//	$salon_tid = $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'];
//	$bill_date = $form_state['values']['field_date'][LANGUAGE_NONE][0]['value'];
//	$node_balance_nid = get_node_by_field('balance_check', $salon_tid);
//
//	if ($node_balance_nid) {
//		$node_balance = node_load($node_balance_nid->nid);
//
//		if ($node_balance->field_date && $node_balance->field_date[LANGUAGE_NONE][0]['value'] && $bill_date < $node_balance->field_date[LANGUAGE_NONE][0]['value']) {
//			form_set_error('field_date', t('Безнал для данного адреса заведен позже даты создания чека.'));
//		}
//
//	}
//
//	if (
//        $form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] == PAY_TYPE_PEREKIDKA_TID_MASTER && !form_get_errors()
//    ) {
//        $form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] = PAY_TYPE_CREDIT_TID;
//        create_programmatically_bill($form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid'], $form_state['values']);
//	}
//
//    if($form_state['values']['field_is_public'][LANGUAGE_NONE][0]['value'] && $form_state['values']['field_shared_address'][LANGUAGE_NONE][0]['target_id']){
//        $public_bill_nid = node_load($form_state['values']['field_shared_address'][LANGUAGE_NONE][0]['target_id']);
//
//    }
//
//}

function check_form_validate($form, &$form_state){

    $salon_tid = $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'];
    $bill_date = $form_state['values']['field_date'][LANGUAGE_NONE][0]['value'];
    $node_balance_nid = get_node_by_field('balance_check', $salon_tid);

    if ($node_balance_nid) {
        $node_balance = node_load($node_balance_nid->nid);

        if ($node_balance->field_date && $node_balance->field_date[LANGUAGE_NONE][0]['value'] && $bill_date < $node_balance->field_date[LANGUAGE_NONE][0]['value']) {
            form_set_error('field_date', t('Безнал для данного адреса заведен позже даты создания чека.'));
        }

    }

    if (
        ($form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] == PAY_TYPE_PEREKIDKA_TID_MASTER) && !form_get_errors()
    ) {
        if ($form_state['values']['field_pay_format'][LANGUAGE_NONE][0]['tid'] == PAY_FORMAT_WITHOUT_CASH_TID) {
            $form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] = PAY_TYPE_CREDIT_TID;
            create_programmatically_bill($form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid'], $form_state['values'], $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'], $form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid']);
        }
        else if($form_state['values']['field_pay_format'][LANGUAGE_NONE][0]['tid'] == PAY_FORMAT_KASSA_TID) {

            // ORDER OF THE NEXT FIELDS IS IMPORTANT BECAUSE OF $source_bill_node['body']['und'][0]['value'] in  create_programmatically_bill()
            create_programmatically_bill($form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'], $form_state['values'], $form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid'], $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid']);

            $form_state['values']['field_pay_type'][LANGUAGE_NONE][0]['tid'] = PAY_TYPE_CREDIT_TID;
            create_programmatically_bill($form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid'], $form_state['values'], $form_state['values']['field_salon'][LANGUAGE_NONE][0]['tid'], $form_state['values']['field_perekidka_balance'][LANGUAGE_NONE][0]['tid'],PAY_TYPE_CREDIT_TID);

        }

    }

}

function _salon_close_day_node_form_submit($form, &$form_state){
	$salon_tid = $form_state['node']->field_salon[LANGUAGE_NONE][0]['tid'];
	$date_array = explode('-', $form_state['node']->field_date[LANGUAGE_NONE][0]['value']);
	$date_string = '/' . $date_array[0] . '-' . $date_array[1];

	$form_state['redirect'] = array('bills/month' . $date_string, array('query' => array('field_salon_tid' => $salon_tid)));
}

function salon_node_delete($node){
	if (
		$node->type == variable_get('bill_node_type', BILL_NODE_TYPE)
		&& $node->field_pay_format[LANGUAGE_NONE]['0']['tid'] == PAY_FORMAT_WITHOUT_CASH_TID
	) {
        //if is public without cash ballace operation
        if ($node->field_is_public[LANGUAGE_NONE][0]['value'] && $node->field_shared_address[LANGUAGE_NONE][0]['target_id']) {
            $isset_node_balance_nid = $node->field_shared_address[LANGUAGE_NONE][0]['target_id'];
        }
        else {
            $salon_tid = $node->field_salon[LANGUAGE_NONE][0]['tid'];
            $isset_node_balance_nid = get_node_by_field('balance_check', $salon_tid);
        }

		if ($isset_node_balance_nid) {
			$balance_check = is_integer($isset_node_balance_nid) ? node_load($isset_node_balance_nid) : node_load($isset_node_balance_nid->nid);
			$balance_amount = (float)$balance_check->field_costs[LANGUAGE_NONE]['0']['value'];
			$check_anount = (float)$node->field_costs[LANGUAGE_NONE]['0']['value'];

			if ($node->field_pay_type[LANGUAGE_NONE]['0']['tid'] == PAY_TYPE_CREDIT_TID) {
				$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount + abs($check_anount);
			}
			else {
				if ($check_anount < 0) {
					$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount + abs($check_anount);
				}
				else {
					$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount - $check_anount;
				}
			}

			$balance_check->revision = 1;
			node_save($balance_check);
		}

	}
}

function salon_node_insert($node){
	if (
		$node->type == variable_get('bill_node_type', BILL_NODE_TYPE)
		&& $node->field_pay_format[LANGUAGE_NONE]['0']['tid'] == PAY_FORMAT_WITHOUT_CASH_TID
	) {
        //if is public without cash ballace operation
        if ($node->field_is_public[LANGUAGE_NONE][0]['value'] && $node->field_shared_address[LANGUAGE_NONE][0]['target_id']) {
            $isset_node_balance_nid = $node->field_shared_address[LANGUAGE_NONE][0]['target_id'];
        }
        else {
            $salon_tid = $node->field_salon[LANGUAGE_NONE][0]['tid'];
            $isset_node_balance_nid = get_node_by_field('balance_check', $salon_tid);
        }

		if ($isset_node_balance_nid) {
			$balance_check = is_numeric($isset_node_balance_nid) ? node_load($isset_node_balance_nid) : node_load($isset_node_balance_nid->nid);
			$balance_amount = (float)$balance_check->field_costs[LANGUAGE_NONE]['0']['value'];
			$check_anount = (float)$node->field_costs[LANGUAGE_NONE]['0']['value'];

			if ($node->field_pay_type[LANGUAGE_NONE]['0']['tid'] == PAY_TYPE_CREDIT_TID) {
					$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount - abs($check_anount);
			}
			else {
				if ($check_anount < 0) {
					$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount - abs($check_anount);
				}
				else {
					$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount + $check_anount;
				}
			}
            $balance_check->revision = 1;
			node_save($balance_check);
		}

	}
}

function create_programmatically_bill($perekidka_salon_tid, &$source_bill_node) {
	global $user;
	$perekidka_salon = taxonomy_term_load($perekidka_salon_tid);
    $source_salon = taxonomy_term_load($source_bill_node['field_salon'][LANGUAGE_NONE][0]['tid']);

	$node = new stdClass();
	$node->type = 'event_calendar';
	node_object_prepare($node);
	$node->status = 1;
	$node->uid = $user->uid;
	$node->name = $user->name;
	$node->title = t('Перекидка за !salon', array('!salon' => $perekidka_salon->name));
	$node->promote = 1;
	$node->created = time();
	$node->changed = time();
	$node->timestamp = time();
	$node->sticky = 0;
	$node->format = 3;
	$node->language = 'en';
	$node->body['und'][0]['format'] = 3;
	$node->body['und'][0]['value'] = t('Перекидка из !salon', array('!salon' => $source_salon->name));

    $source_bill_node['body']['und'][0]['value'] = t('Перекидка в !salon', array('!salon' => $perekidka_salon->name));

	$node->revision = TRUE;
	$node->comment = 1;
	$node->is_new = TRUE;

	//Bill fields
	$node->field_salon = array(LANGUAGE_NONE => array(array('tid' => $perekidka_salon_tid)));
	$node->field_pay_type = array(LANGUAGE_NONE => array(array('tid' => PAY_TYPE_DEBIT_TID)));
	$node->field_pay_format = $source_bill_node['field_pay_format'];
	$node->field_date = $source_bill_node['field_date'];
	$node->field_articul = $source_bill_node['field_articul'];
	$node->field_costs = $source_bill_node['field_costs'];
	$node->event_calendar_status = $source_bill_node['event_calendar_status'];
	$node->field_perekidka_balance = array();

	$node = node_submit($node);
	node_save($node);
}

function salon_node_update($node){
	if (
		$node->type == variable_get('bill_node_type', BILL_NODE_TYPE)
		&& $node->field_pay_format[LANGUAGE_NONE]['0']['tid'] == PAY_FORMAT_WITHOUT_CASH_TID
	) {

		$old_node = $node->original;
		$old_value = (float)$old_node->field_costs[LANGUAGE_NONE]['0']['value'];
		$new_value = (float)$node->field_costs[LANGUAGE_NONE]['0']['value'];

		if ($old_value != $new_value || $node->field_pay_type[LANGUAGE_NONE]['0']['tid'] != $old_node->field_pay_type[LANGUAGE_NONE]['0']['tid']) {// If Costs changed or pay type

			$salon_tid = $node->field_salon[LANGUAGE_NONE][0]['tid'];
			$isset_node_balance_nid = get_node_by_field('balance_check', $salon_tid);

			if ($isset_node_balance_nid) {

				$balance_check = is_numeric($isset_node_balance_nid) ? node_load($isset_node_balance_nid) : node_load($isset_node_balance_nid->nid);
				$balance_amount = (float)$balance_check->field_costs[LANGUAGE_NONE]['0']['value'];
				$check_anount = $new_value - $old_value;

				if ($node->field_pay_type[LANGUAGE_NONE]['0']['tid'] == PAY_TYPE_CREDIT_TID) {
						$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount - abs($check_anount);
				}
				else {
					if ($check_anount < 0) {
						$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount - abs($check_anount);
					}
					else {
						$balance_check->field_costs[LANGUAGE_NONE]['0']['value'] = $balance_amount + $check_anount;
					}
				}
				$balance_check->revision = 1;
				node_save($balance_check);
			}
		}


	}
}

/**
 * Implements hook_views_api().
 */
function salon_views_api() {
	return array(
		'api' => 3.0,
		'path' => drupal_get_path('module', 'salon') . '/views',
	);
}

function salon_node_presave($node){
	global $user;

	if ($node->type == variable_get('bill_node_type', BILL_NODE_TYPE)) {
		$datetime_array = explode(' ', $node->field_date[LANGUAGE_NONE][0]['value']);
		$salon_tid = $node->field_salon[LANGUAGE_NONE][0]['tid'];
		$closed_days = views_get_view_result('all_closed_days', 'block_3', $salon_tid, $datetime_array[0]);
		$salon_data = taxonomy_term_load($salon_tid);
		$node->title = t('Чек для !address за !date', array('!address' => $salon_data->name,  '!date' => $node->field_date[LANGUAGE_NONE][0]['value']));

		if ($closed_days) {
			if (!user_access('administer site configuration', $user)) {
				$node->event_calendar_status[LANGUAGE_NONE][0]['tid'] = RED_STATUS_TID;
			}
		}

	}
	if ($node->type == variable_get('close_day_node_type', CLOSE_DAY_NODE_TYPE)) {

		$salon_tid = $node->field_salon[LANGUAGE_NONE][0]['tid'];
		$date = date('Y-m-d', strtotime($node->field_date[LANGUAGE_NONE][0]['value']));
		$hacked_days = views_get_view_result('all_closed_days', 'block_4', $salon_tid, $date);

		if ($hacked_days) {
			$nids = array();
			foreach ($hacked_days as $h_day) {
				$nids[] = $h_day->nid;
			}
			if ($nids) {
				// Get all nodes of 'page' type, populate the field with a value of '1'.
				$pages = db_query("SELECT nid, vid FROM {node} WHERE nid IN (:nids)", array(':nids' => $nids))->fetchAllAssoc('nid');
				foreach ($pages as $nid => $values) {
					$fields = array(
						'entity_type' => 'node',
						'bundle' => BILL_NODE_TYPE,
						'event_calendar_status_tid' => GREEN_STATUS_EVENT_TID,
					);
					update_bill_node_status($values->nid, $fields);
				}
			}
		}
	}
}

function update_bill_node_status($nid, $fields){

//	db_update('field_data_event_calendar_status')
//		->fields($fields)
//		->condition('entity_id', $nid)
//		->execute();
//	db_update('field_revision_event_calendar_status')
//		->fields($fields)
//		->condition('entity_id', $nid)
//		->execute();
}

/**
 * Implements hook_menu().
 */
function salon_menu() {
	$items = array();

	$items['ajax/update_submission_status'] = array(
		'page callback' => 'nowlegal_common_ajax_update_submission_status',
		'access callback' => 'user_access',
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function nowlegal_common_ajax_update_submission_status(){
	if (isset($_REQUEST['status']) && $_REQUEST['status'] && isset($_REQUEST['sid']) && $_REQUEST['sid']) {
		$sid = (int)$_REQUEST['sid'];
		$status = $_REQUEST['status'] == 'true' ? 1 : 0;
		variable_set('lawyer_plan_status_sid_' . $sid, $status);

		print drupal_json_decode(array('success' => TRUE));
		die();
	}

	print drupal_json_decode(array('success' => FALSE));
	die();

}

function get_node_by_field($type = 'balance_check', $tid){
	$query = new EntityFieldQuery();

	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', $type)
		->propertyCondition('status', NODE_PUBLISHED)
		->fieldCondition('field_salon', 'tid', $tid)
		->range(0, 1)
	;

	$result = $query->execute();
	if (isset($result['node'])) {
		$node = key($result['node']);
		if (is_integer($node)) {
			return $result['node'][$node];
		}
		return key($result['node']);
	}
	return false;
}